from odoo.tests import common, new_test_user
from odoo.exceptions import ValidationError
from odoo import fields

class TestHospitalModule(common.TransactionCase):

    def setUp(self):
        super(TestHospitalModule, self).setUp()
        self.Patient = self.env['hospital.patient']
        self.Doctor = self.env['hospital.doctor']
        self.Appointment = self.env['hospital.appointment']

        # Create a default doctor for the tests that need it
        self.doctor = self.Doctor.create({
            'doctor_name': 'Dr. Strange',
            'gender': 'male',
            'age': 45,
        })

    def test_patient_defaults(self):
        """Test that patient defaults (reference and note) are set if not given."""
        patient = self.Patient.create({'name': 'Test Patient', 'age': 30})
        self.assertNotEqual(patient.reference, 'New', "Patient reference should be generated by a sequence.")
        print("PASS: Patient reference is not 'New'.")

        self.assertEqual(patient.note, 'New Patient', "Default note should be set if none provided.")
        print("PASS: Patient note defaulted correctly.")

    def test_patient_unique_name_constraint(self):
        """Test that creating two patients with the same name raises a ValidationError."""
        self.Patient.create({'name': 'UniqueName', 'age': 20})
        print("PASS: First patient with name 'UniqueName' created successfully.")
        try:
            self.Patient.create({'name': 'UniqueName', 'age': 22})
            # If we reach this line, no ValidationError was raised.
            print("FAIL: Duplicate name was allowed, which should not happen.")
        except ValidationError:
            print("PASS: ValidationError raised as expected for duplicate patient name.")

    def test_patient_age_constraint(self):
        """Test that patient age cannot be zero."""
        try:
            self.Patient.create({'name': 'No Age Patient', 'age': 0})
            print("FAIL: Patient with age=0 created without ValidationError.")
        except ValidationError:
            print("PASS: ValidationError raised for zero age as expected.")

    def test_appointment_cannot_delete_done(self):
        """Test that you cannot delete appointments in 'done' state."""
        patient = self.Patient.create({'name': 'Deletable Patient', 'age': 25})
        appointment = self.Appointment.create({
            'patient_id': patient.id,
            'doctor_id': self.doctor.id,
        })
        appointment.action_confirm()
        appointment.action_done()
        try:
            appointment.unlink()
            print("FAIL: Deleted a 'done' appointment, which should not be possible.")
        except ValidationError:
            print("PASS: ValidationError raised as expected for deleting 'done' appointment.")

        # Ensure that if appointment is in draft, it can be deleted
        appointment2 = self.Appointment.create({
            'patient_id': patient.id,
            'doctor_id': self.doctor.id,
        })
        appointment2.unlink()
        print("PASS: Draft appointment deleted successfully.")

    def test_create_patient(self):
        """Test patient creation with name and age fields."""
        user = new_test_user(self.env, "test base user", groups="base.group_user")

        patient = self.Patient.create({
            "name": "John Doe",
            "age": 45,
        })

        try:
            self.assertEqual(patient.age, 45, "Patient creation has bug, age should be 45")
            print("PASS: Patient age is correctly set to 45.")
        except AssertionError as e:
            print(f"FAIL: {str(e)}")

        try:
            self.assertEqual(patient.name, "John Doe", "Patient creation has bug, name should be John Doe")
            print("PASS: Patient name is correctly set to 'John Doe'.")
        except AssertionError as e:
            print(f"FAIL: {str(e)}")

    def test_doctor_appointment_count(self):
        """Test that doctor's appointment count updates correctly."""
        user = new_test_user(self.env, "test base user", groups="base.group_user")

        patient = self.Patient.create({
            "name": "Jane Doe",
            "age": 60,
        })
        print("PASS: Patient created successfully.")

        doctor = self.Doctor.create({
            "doctor_name": "Bob Smith",
            "gender": "male",
            "age": 50,
        })
        print("PASS: Doctor created successfully.")

        appointment = self.Appointment.create({
            "patient_id": patient.id,
            "doctor_id": doctor.id,
            "date_appointment": fields.Date.today(),
        })
        print("PASS: Appointment created successfully.")

        try:
            self.assertEqual(doctor.appointment_count, 1, "Appointment creation has bug, number of appointments should be 1")
            print("PASS: Doctor appointment count correctly updated to 1.")
        except AssertionError as e:
            print(f"FAIL: {str(e)}")
